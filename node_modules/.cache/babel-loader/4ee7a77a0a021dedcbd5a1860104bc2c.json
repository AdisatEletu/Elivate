{"ast":null,"code":"var _jsxFileName = \"/Users/softcom/Documents/Elivate/src/components/dropDown/DropDown.js\";\nimport React, { useEffect } from \"react\";\nimport { DropdownOption, DropdownWrapper, OptionsWrapper, Input, Options, InputWrapper } from \"../../assets/style\";\nimport { bool, string, func, object as objectPropType, array as arrayPropType } from \"prop-types\"; //Component\n\nexport const DropDown = ({\n  options,\n  inputOption,\n  onChange,\n  onSelect,\n  isOpen,\n  toggle,\n  selectedColor,\n  placeholder,\n  className,\n  fontColor\n}) => {\n  const selectedColorObj = {\n    backgroundColor: selectedColor\n  };\n  const fontColorObj = {\n    color: fontColor\n  };\n  useEffect(() => {\n    options.sort((a, b) => a.option.localeCompare(b.option));\n  }, [options]);\n  return /*#__PURE__*/React.createElement(DropdownWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(InputWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    style: fontColorObj,\n    \"data-testid\": \"click-input\",\n    onClick: toggle,\n    value: inputOption,\n    placeholder: placeholder,\n    onChange: e => onChange(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }), isOpen ? /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"icon\",\n    width: 10,\n    height: 10,\n    src: require(\"../../assets/icons/arrow-down.svg\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }) : /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"icon\",\n    width: 20,\n    height: 20,\n    src: require(\"../../assets/icons/arrow-up.svg\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  })), isOpen && /*#__PURE__*/React.createElement(OptionsWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, options.length > 0 ? /*#__PURE__*/React.createElement(DropdownOption, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, options.map((option, index) => {\n    return /*#__PURE__*/React.createElement(Options, {\n      style: option.option === inputOption ? selectedColorObj : fontColorObj,\n      onClick: () => onSelect(option.option),\n      key: option.uid,\n      className: className,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 19\n      }\n    }, option.option);\n  })) : /*#__PURE__*/React.createElement(DropdownOption, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Options, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 15\n    }\n  }, \"No data matched.\"))));\n};\nDropDown.propTypes = {\n  options: arrayPropType,\n  inputOption: string,\n  onChange: func,\n  onSelect: func,\n  isOpen: bool,\n  toggle: func,\n  selectedColor: string,\n  placeholder: string,\n  className: string,\n  fontColor: string\n};\nDropDown.defaultProps = {\n  options: [],\n  inputOption: \"\",\n  isOpen: false,\n  selectedColor: \"#ccc\",\n  placeholder: \"select an option\",\n  className: \"\",\n  fontColor: \"#000\"\n};","map":{"version":3,"sources":["/Users/softcom/Documents/Elivate/src/components/dropDown/DropDown.js"],"names":["React","useEffect","DropdownOption","DropdownWrapper","OptionsWrapper","Input","Options","InputWrapper","bool","string","func","object","objectPropType","array","arrayPropType","DropDown","options","inputOption","onChange","onSelect","isOpen","toggle","selectedColor","placeholder","className","fontColor","selectedColorObj","backgroundColor","fontColorObj","color","sort","a","b","option","localeCompare","e","target","value","require","length","map","index","uid","propTypes","defaultProps"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport {\n  DropdownOption,\n  DropdownWrapper,\n  OptionsWrapper,\n  Input,\n  Options,\n  InputWrapper\n} from \"../../assets/style\";\nimport {\n  bool,\n  string,\n  func,\n  object as objectPropType,\n  array as arrayPropType\n} from \"prop-types\";\n\n//Component\nexport const DropDown = ({\n                           options,\n                           inputOption,\n                           onChange,\n                           onSelect,\n                           isOpen,\n                           toggle,\n                           selectedColor,\n                           placeholder,\n                           className,\n                           fontColor,\n                         }) => {\n  const selectedColorObj = {\n    backgroundColor: selectedColor\n  };\n  const fontColorObj = {\n    color: fontColor\n  };\n  \n  useEffect(() => {\n    options.sort((a, b) => a.option.localeCompare(b.option));\n  }, [options]);\n  \n  return (\n    <DropdownWrapper>\n      <InputWrapper>\n        <Input\n          style={fontColorObj}\n          data-testid=\"click-input\"\n          onClick={toggle}\n          value={inputOption}\n          placeholder={placeholder}\n          onChange={(e) => onChange(e.target.value)}\n        />\n        {isOpen ? (\n          <img\n            alt=\"icon\"\n            width={10}\n            height={10}\n            src={require(\"../../assets/icons/arrow-down.svg\")}\n          />\n        ) : (\n          <img\n            alt=\"icon\"\n            width={20}\n            height={20}\n            src={require(\"../../assets/icons/arrow-up.svg\")}\n          />\n        )}\n      </InputWrapper>\n      {/*<img src={require('../../assets/icons/arrow-down.svg')} alt={\"ico\"}/>*/}\n      {isOpen && (\n        <OptionsWrapper>\n          {options.length > 0 ? (\n            <DropdownOption>\n              {options.map((option, index) => {\n                return (\n                  <Options\n                    style={\n                      option.option === inputOption\n                        ? selectedColorObj\n                        : fontColorObj\n                    }\n                    onClick={() => onSelect(option.option)}\n                    key={option.uid}\n                    className={className}\n                  >\n                    {option.option}\n                  </Options>\n                );\n              })}\n            </DropdownOption>\n          ) : (\n            <DropdownOption>\n              <Options>No data matched.</Options>\n            </DropdownOption>\n          )}\n        </OptionsWrapper>\n      )}\n    </DropdownWrapper>\n  );\n};\n\nDropDown.propTypes = {\n  options: arrayPropType,\n  inputOption: string,\n  onChange: func,\n  onSelect: func,\n  isOpen: bool,\n  toggle: func,\n  selectedColor: string,\n  placeholder: string,\n  className: string,\n  fontColor: string\n};\nDropDown.defaultProps = {\n  options: [],\n  inputOption: \"\",\n  isOpen: false,\n  selectedColor: \"#ccc\",\n  placeholder: \"select an option\",\n  className: \"\",\n  fontColor: \"#000\"\n};\n"]},"metadata":{},"sourceType":"module"}