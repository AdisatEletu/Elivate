{"ast":null,"code":"var _jsxFileName = \"/Users/softcom/Documents/Elivate/src/components/forms/otp/OtpInput.js\";\nimport React, { useRef, useState } from \"react\";\nimport './otp.css';\nexport const OtpInput = ({\n  length,\n  label,\n  loading,\n  onComplete\n}) => {\n  const [code, setCode] = useState([...Array(length)].map(() => \"\"));\n  const inputs = useRef([]);\n\n  const controlInput = (e, slot) => {\n    const num = e.target.value;\n    if ([/^0-9/.test(num)]) return;\n    const newNum = [...code];\n    setCode(newNum);\n\n    if (slot !== length - 1) {\n      inputs.current[slot + 1].focus();\n    }\n\n    if (newNum.every(num => num !== \"\")) {\n      onComplete(newNum.join(\"\"));\n    }\n  };\n\n  const handleKeyUp = (e, slot) => {\n    if (e.keyCode === 8 && !code[slot] && slot !== 0) {\n      const newCode = [...code];\n      newCode[slot - 1] = \"\";\n      setCode(newCode);\n      inputs.current[slot - 1].focus();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, code.map((num, i) => {\n    return /*#__PURE__*/React.createElement(\"input\", {\n      className: 'otp-input',\n      value: num,\n      autoFocus: !code[0].length && i === 0,\n      maxLength: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 16\n      }\n    });\n  }));\n};","map":{"version":3,"sources":["/Users/softcom/Documents/Elivate/src/components/forms/otp/OtpInput.js"],"names":["React","useRef","useState","OtpInput","length","label","loading","onComplete","code","setCode","Array","map","inputs","controlInput","e","slot","num","target","value","test","newNum","current","focus","every","join","handleKeyUp","keyCode","newCode","i"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,QAAvB,QAAsC,OAAtC;AACA,OAAO,WAAP;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,KAAV;AAAiBC,EAAAA,OAAjB;AAA0BC,EAAAA;AAA1B,CAAD,KAA2C;AACjE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,CAAC,GAAGQ,KAAK,CAACN,MAAD,CAAT,EAAmBO,GAAnB,CAAuB,MAAM,EAA7B,CAAD,CAAhC;AACA,QAAMC,MAAM,GAAGX,MAAM,CAAC,EAAD,CAArB;;AAEA,QAAMY,YAAY,GAAG,CAACC,CAAD,EAAIC,IAAJ,KAAY;AAC/B,UAAMC,GAAG,GAAGF,CAAC,CAACG,MAAF,CAASC,KAArB;AACA,QAAG,CAAC,OAAOC,IAAP,CAAYH,GAAZ,CAAD,CAAH,EAAuB;AACvB,UAAMI,MAAM,GAAG,CAAC,GAAGZ,IAAJ,CAAf;AACAC,IAAAA,OAAO,CAACW,MAAD,CAAP;;AACA,QAAGL,IAAI,KAAKX,MAAM,GAAC,CAAnB,EAAqB;AACnBQ,MAAAA,MAAM,CAACS,OAAP,CAAeN,IAAI,GAAG,CAAtB,EAAyBO,KAAzB;AACD;;AACD,QAAGF,MAAM,CAACG,KAAP,CAAaP,GAAG,IAAGA,GAAG,KAAK,EAA3B,CAAH,EAAkC;AAChCT,MAAAA,UAAU,CAACa,MAAM,CAACI,IAAP,CAAY,EAAZ,CAAD,CAAV;AACD;AAEF,GAZD;;AAeA,QAAMC,WAAW,GAAG,CAACX,CAAD,EAAIC,IAAJ,KAAY;AAC9B,QAAGD,CAAC,CAACY,OAAF,KAAc,CAAd,IAAmB,CAAClB,IAAI,CAACO,IAAD,CAAxB,IAAkCA,IAAI,KAAK,CAA9C,EAAgD;AAC9C,YAAMY,OAAO,GAAG,CAAC,GAAGnB,IAAJ,CAAhB;AACAmB,MAAAA,OAAO,CAACZ,IAAI,GAAG,CAAR,CAAP,GAAoB,EAApB;AACAN,MAAAA,OAAO,CAACkB,OAAD,CAAP;AACAf,MAAAA,MAAM,CAACS,OAAP,CAAeN,IAAI,GAAG,CAAtB,EAAyBO,KAAzB;AACD;AACF,GAPD;;AAUA,sBACE,0CACGd,IAAI,CAACG,GAAL,CAAS,CAACK,GAAD,EAAMY,CAAN,KAAU;AAClB,wBAAO;AAAO,MAAA,SAAS,EAAE,WAAlB;AAA+B,MAAA,KAAK,EAAEZ,GAAtC;AAA2C,MAAA,SAAS,EAAE,CAACR,IAAI,CAAC,CAAD,CAAJ,CAAQJ,MAAT,IAAmBwB,CAAC,KAAK,CAA/E;AAAkF,MAAA,SAAS,EAAE,CAA7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFA,CADH,CADF;AAOD,CApCM","sourcesContent":["import React, {useRef, useState} from \"react\";\nimport './otp.css'\n\nexport const OtpInput = ({ length, label, loading, onComplete }) =>{\n  const [code, setCode] = useState([...Array(length)].map(() => \"\"));\n  const inputs = useRef([]);\n  \n  const controlInput = (e, slot) =>{\n    const num = e.target.value;\n    if([/^0-9/.test(num)]) return;\n    const newNum = [...code];\n    setCode(newNum);\n    if(slot !== length-1){\n      inputs.current[slot + 1].focus()\n    }\n    if(newNum.every(num=> num !== \"\")){\n      onComplete(newNum.join(\"\"))\n    }\n    \n  };\n  \n  \n  const handleKeyUp = (e, slot) =>{\n    if(e.keyCode === 8 && !code[slot] && slot !== 0){\n      const newCode = [...code];\n      newCode[slot - 1] = \"\";\n      setCode(newCode);\n      inputs.current[slot - 1].focus();\n    }\n  };\n  \n  \n  return(\n    <>\n      {code.map((num, i)=>{\n        return <input className={'otp-input'} value={num} autoFocus={!code[0].length && i === 0} maxLength={1}/>\n      })}\n    </>\n  )\n};"]},"metadata":{},"sourceType":"module"}