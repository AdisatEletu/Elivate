{"ast":null,"code":"import { IS_LOGGING_IN, DONE_LOGGING_IN, SET_USER, LOGOUT_USER } from '../types';\nexport const setCurrentUser = user => dispatch => {\n  dispatch({\n    type: SET_USER,\n    payload: user\n  });\n};\nexport const loginUser = (email, password) => dispatch => {\n  dispatch({\n    type: IS_LOGGING_IN\n  }); //login logic here.\n  // when done, dispatch({type: DONE_LOGGING_IN})\n\n  return Promise.resolve(`email: ${email}, password${password}`) // whatever operation\n  .then(user => {\n    dispatch({\n      type: DONE_LOGGING_IN\n    });\n    dispatch(setCurrentUser(user));\n  });\n};\nexport const logoutUser = () => dispatch => {\n  dispatch({\n    type: LOGOUT_USER\n  });\n};","map":{"version":3,"sources":["/Users/softcom/Documents/react-redux-base/src/redux/actions/authActions.js"],"names":["IS_LOGGING_IN","DONE_LOGGING_IN","SET_USER","LOGOUT_USER","setCurrentUser","user","dispatch","type","payload","loginUser","email","password","Promise","resolve","then","logoutUser"],"mappings":"AAAA,SACEA,aADF,EAEEC,eAFF,EAGEC,QAHF,EAIEC,WAJF,QAKO,UALP;AAOA,OAAO,MAAMC,cAAc,GAAGC,IAAI,IAAIC,QAAQ,IAAI;AAChDA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEL,QAAR;AAAkBM,IAAAA,OAAO,EAAEH;AAA3B,GAAD,CAAR;AACD,CAFM;AAIP,OAAO,MAAMI,SAAS,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqBL,QAAQ,IAAI;AACxDA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEP;AAAR,GAAD,CAAR,CADwD,CAExD;AACA;;AACA,SAAOY,OAAO,CAACC,OAAR,CAAiB,UAASH,KAAM,aAAYC,QAAS,EAArD,EAAwD;AAAxD,GACJG,IADI,CACCT,IAAI,IAAI;AACZC,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEN;AAAR,KAAD,CAAR;AACAK,IAAAA,QAAQ,CAACF,cAAc,CAACC,IAAD,CAAf,CAAR;AACD,GAJI,CAAP;AAKD,CATM;AAWP,OAAO,MAAMU,UAAU,GAAG,MAAMT,QAAQ,IAAI;AAC1CA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEJ;AAAR,GAAD,CAAR;AACD,CAFM","sourcesContent":["import {\n  IS_LOGGING_IN,\n  DONE_LOGGING_IN,\n  SET_USER,\n  LOGOUT_USER,\n} from '../types';\n\nexport const setCurrentUser = user => dispatch => {\n  dispatch({ type: SET_USER, payload: user });\n};\n\nexport const loginUser = (email, password) => dispatch => {\n  dispatch({ type: IS_LOGGING_IN });\n  //login logic here.\n  // when done, dispatch({type: DONE_LOGGING_IN})\n  return Promise.resolve(`email: ${email}, password${password}`) // whatever operation\n    .then(user => {\n      dispatch({ type: DONE_LOGGING_IN });\n      dispatch(setCurrentUser(user));\n    });\n};\n\nexport const logoutUser = () => dispatch => {\n  dispatch({ type: LOGOUT_USER });\n};\n"]},"metadata":{},"sourceType":"module"}